#!/bin/bash


# Output formatters
bold_text=$(tput bold)
normal_text=$(tput sgr0)

: '
This function is used to print the help message that contains all the details about usage and other flags
'
function helper(){
    echo "${bold_text}Usage:${normal_text} ${0} -p <platformName> -t <titleOfProblem>"
    echo -e "\n${bold_text}Options:${normal_text}"
    echo -e "\t-n\t The problem number\n"
    echo -e "\t-p\t The platform name. Examples of this are:\n\t  \t GeeksForGeeks(gfg), Leetcode(lc), CodingNinjas(cn), HackerRank(hr)\n"
    echo -e "\t-t\t The problem title, for example: 'if-else-decision-making'\n"
    echo -e "\t-l\t The language used to code. Current accepted inputs: cpp/c++/py/python\n"
    echo -e "\t-h\t Invoke this function\n"

    exit 0
}

: '
This function is going to be used to throw errors. THe function prints the value
passed parameter and calls the helper function
'
function throwError(){
    local errorMessage=$1
    echo "${bold_text}Error: ${normal_text} $errorMessage"
    echo -e "\n"
    helper
}

: '
This function returns 1 if the received number is a positive integer, and 0 otherwise
' 
function isPositiveInteger(){
    local input=$1
    if [[ $input =~ ^[0-9]+$ ]]; then
        return 1
    else
        return 0
    fi
}

: '
This function parses the platform variable has only certain values, This will decide what folder the 
solution folder will end up in
This function assumes that the toLowercase function has already been applied to $platform
'
function parsePlatformValue(){
    parentFolder="Coding-Problems/"
    subParentFolder=""
    case $platform in
        lc|leetcode)
            subParentFolder="Leetcode/"
            ;;
        gfg|geeksforgeeks)
            subParentFolder="GeeksForGeeks/"
            ;;
        cn|codingninjas)
            subParentFolder="CodingNinjas/"
            ;;
        hr|hackerrank)
            subParentFolder="HackerRank/"
            ;;
        *)
            throwError "Invalid platform value provided. Accepted values are Leetcode, GeeksForGeeks, HackerRank, CodingNinjas, or their shortforms"
            ;;
    esac
    # echo "$parentFolder$subParentFolder"
}


: '
This function capitalizes the first letter of each word in the title.
Assuming that the parameter, title has the format:
this-is-the-title

The output would be:
This-Is-The-Title
'
function capitalizeFirstLetters(){
    local -n title=$1
    title=$(echo $title | sed "s/\b\([a-zA-Z]\)/\u\1/g")
}



: '
This function parses the value of the language flag
'
function parseLanguageValue(){
    case "$language" in
        c++|cpp|cplusplus)
            language=cpp
            ;;
        python|py)
            language=py
            ;;
        *)
            throwError "Invalid language option provided"
            helper
            ;;
    esac
    # echo "Final Language: $language"
}


: '
This function is going to be used for testing
' 
function tester(){
    echo "#######################TESTING#######################"
    echo "Platform      : ${platform}"
    echo "Title         : ${problemTitle}"
    isPositiveInteger $problemNumber
    if [[ $? = 1 ]]; then
        echo "Problem Number: ${problemNumber}"
    fi
    echo "Language      : ${language}"
    echo "#####################################################"
}


: '
This function is used to convert all the input flag variable arguments uppercase characters to lowercase
problemTitle, platform, problemNumber, language are the variables which will be converted
'
function toLowercase(){
    local -n temp=$1
    temp=${temp,,}
}

: '
This function checks whether proper flags were used in the input function.
'
function checkInputCommand(){
    # Check if both these flags are given or not. 
    if [ -z "${problemTitle}" ] || [ -z "${platform}" ]; then
        throwError "the -t and the -p flags with proper values are important"
        helper
    fi

    # Now that we know problemTitle and platform are not empty, we can convert any uppercase characters to lowercase.
    toLowercase platform
    toLowercase problemTitle

    # Check if the language flag is empty
    if [ -z "${language}" ]; then
        # Provide a default value, which is C++
        language="cpp"
    else
        toLowercase language
    fi

    # Here we are checking if problemNumber was ever initialized. If so we need to act accordingly
    if [ -n "$problemNumber" ]; then
        isPositiveInteger $problemNumber
        if [[ $? = 0 ]]; then
            throwError "Invalid value provided for the -n flag"
        fi
    fi
}

: '
This function parses the input flags. It takes the parametric flags values and stores them into variables
'
function parseInputCommand(){
    while getopts ":l:p:n:t:h" flag
    do
	case "${flag}" in
	    l)
                language=${OPTARG}
                ;;
	    p)
                platform=${OPTARG}
                ;;
	    n)
                problemNumber=${OPTARG}
                ;;
	    t)
                problemTitle=${OPTARG}
                ;;
            h)
                helper
                ;;
            *)
                throwError "Invalid options provided"
                helper
                ;;
	esac
    done
    
    checkInputCommand

    # At this point all the major flags' values have been checked. We can now move
    # on to parsing their values for individual flags
    parsePlatformValue

    if [ -n "$language" ]; then
        parseLanguageValue
    fi

    capitalizeFirstLetters problemTitle
}

: '
The main function of the script
'
function main(){    
    # Now that we have done the basic checking, let's parse the input command
    parseInputCommand $@
}

# Call main and pass all the arguments from the command line
main $@



################################################################################
############################### Code Requirements ##############################
################################################################################

# Extra Extra:
# 1. Create a Readme file in every solution folder
#     a. This Readme file can contain:
#         1. Link to Problem
#         2. Solution approaches to different types of solutions, brute-force, better, optimal


# Arguments needed are:
# 1. Platform
#     a. -p followed by the platform
# 2. Problem Number
#     a. -n followed by a number
#     b. This is optional since not all platforms have this
# 3. Title of problem
#     a. -t followed by the title
# 4. Language
#     a. -l followed by the language
#     b. Template for this language should exist
# 5. Extras:
#     a. Make code clean using software engineering principles
#     b. Check for all conditions of input
#     c. Make sure I am doing some sort of input parsing(converting/removing invalid characters from strings of problem title).
#        Example: if-else(decision-making) to if-else-decision-making, 'Hello World' to hello-world
#     d. Make sure I am taking strings as input for title and making using them as one string, 'Hello World' would be
#        two different arguments. But "Hello World" should be an ideal single argumnet.

# Script is supposed to:
# 1. Create a solution folder, in the appropriate repository, based on the given command line arguments
# 2. Create a git branch if one doesnt exist already, based on input received
#     a. Checkout that branch depending on what branch I am currently in
#     b. Also check if folder/branch doesn't exist already


################################################################################
################################################################################
################################################################################
