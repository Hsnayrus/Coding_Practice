#!/bin/bash


# Output formatters
bold_text=$(tput bold)
normal_text=$(tput sgr0)

: '
This function is used to print the help message that contains all the details about usage and other flags
'
function helper(){
    echo "${bold_text}Usage:${normal_text} ${0} -p <platformName> -t <titleOfProblem>"
    echo -e "\n${bold_text}Options:${normal_text}"
    echo -e "\t-n\t The problem number\n"
    echo -e "\t-p\t The platform name. Examples of this are:\n\t  \t GeeksForGeeks(gfg), Leetcode(lc), CodingNinjas(cn), HackerRank(hr)\n"
    echo -e "\t-t\t The problem title, for example: 'if-else-decision-making'\n"

    exit 0
}

: '
This function returns 1 if the received number is a positive integer, and 0 otherwise
' 
function isPositiveInteger(){
    local input=$1
    if [[ $input =~ ^[0-9]+$ ]]; then
        return 1
    else
        return 0
    fi
}

: '
This function is going to be used for testing
' 
function tester(){
    echo "#######################TESTING#######################"
    echo "Platform      : ${platform}"
    echo "Title         : ${problemTitle}"
    echo "Problem Number: ${problemNumber}"
    echo "Language      : ${language}"
    echo "#####################################################"
}


: '
This function is used to convert all the input flag variable arguments uppercase characters to lowercase
problemTitle, platform, problemNumber, language are the variables which will be converted
'
function toLowercase(){
    local -n temp=$1
    temp=${temp,,}
}

: '
This function checks whether proper flags were used in the input function.
'
function checkInputCommand(){
    # Check if both these flags are given or not. 
    if [ -z ${problemTitle} ] || [ -z ${platform} ]; then
        helper
    fi

    # Now that we know problemTitle and platform are not empty, we can convert any uppercase characters to lowercase.
    toLowercase platform
    toLowercase problemTitle
    
    if [ -z ${language} ]; then
        # Provide a default value, which is C++
        language="cpp"
    else
        toLowercase language
    fi
    
    tester
}

: '
This function parses the input flags. It takes the parametric flags values and stores them into variables
'
function parseInputCommand(){
    while getopts ":l:p:n:t:" flag
    do
	case "${flag}" in
	    l)
                language=${OPTARG}
                ;;
	    p)
                platform=${OPTARG}
                ;;
	    n)
                problemNumber=${OPTARG}
                ;;
	    t)
                problemTitle=${OPTARG}
                ;;
            *)
                helper
                ;;
	esac
    done
    
    checkInputCommand
}

: '
The main function of the script
'
function main(){
    # Check number of command line arguments needed
    if [ "$#" -lt 4 ]; then
	helper
    fi
    
    # Now that we have done the basic checking, let's parse the input command
    parseInputCommand $@
}

# Call main and pass all the arguments from the command line
main $@



################################################################################
############################### Code Requirements ##############################
################################################################################

# Extra Extra:
# 1. Create a Readme file in every solution folder
#     a. This Readme file can contain:
#         1. Link to Problem
#         2. Solution approaches to different types of solutions, brute-force, better, optimal


# Arguments needed are:
# 1. Platform
#     a. -p followed by the platform
# 2. Problem Number
#     a. -n followed by a number
#     b. This is optional since not all platforms have this
# 3. Title of problem
#     a. -t followed by the title
# 4. Language
#     a. -l followed by the language
#     b. Template for this language should exist
# 5. Extras:
#     a. Make code clean using software engineering principles
#     b. Check for all conditions of input
#     c. Make sure I am doing some sort of input parsing(converting/removing invalid characters from strings of problem title).
#        Example: if-else(decision-making) to if-else-decision-making, 'Hello World' to hello-world
#     d. Make sure I am taking strings as input for title and making using them as one string, 'Hello World' would be
#        two different arguments. But "Hello World" should be an ideal single argumnet.

# Script is supposed to:
# 1. Create a solution folder, in the appropriate repository, based on the given command line arguments
# 2. Create a git branch if one doesnt exist already, based on input received
#     a. Checkout that branch depending on what branch I am currently in
#     b. Also check if folder/branch doesn't exist already


################################################################################
################################################################################
################################################################################
